<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Grid
var cell_width = 16
var cell_height = 16

var hcells = room_width div cell_width
var vcells = room_height div cell_height


global.grid = mp_grid_create(0,0,hcells,vcells,cell_width,cell_height)
global.enemyFightF = mp_grid_create(0,0,hcells,vcells,cell_width,cell_height)
global.enemyFight1 = mp_grid_create(0,0,hcells,vcells,cell_width,cell_height)
global.enemyFight4 = mp_grid_create(0,0,hcells,vcells,cell_width,cell_height)
global.enemyFight7 = mp_grid_create(0,0,hcells,vcells,cell_width,cell_height)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
instance_create(x,y,objViewFinder) //for following player
global.MovementAllow = false
global.Notifx = 0
global.Notify = 0
global.attacker = 1
Z = 0
roomt = true
tutorial = false
mountain = false
meadow = false
outsideCastle = false
throne = false
Pause = false
quitting = false
Set = 0
check = false
SetQ = 0
MAX = 0
Bcar0 = true
    C = false
Setprevious = 0
mouse_xprevious = 0
mouse_yprevious = 0

t = 0;
increment = 3; //1
amplitude = 6; //peak
yy = y;

        xa = 4
        ya = 4
        xb = 140
        yb = 14
        
        xc = 4
        yc = 15
        xd = 140
        yd = 25
        
        xe = 4
        ye = 26
        xf = 140
        yf = 36
        
        xg = 4
        yg = 37
        xh = 140
        yh = 47
        
        xi = 4
        yi = 48
        xj = 140
        yj = 58
        
        xk = 4
        yk = 59
        xl = 140
        yl = 69

        
global.enemyPos[1,1] = 120
global.enemyPos[1,2] = 70 //90

global.enemyPos[2,1] = 200
global.enemyPos[2,2] = 70 //90

global.allyPos[1,1] = 460
global.allyPos[1,2] = 70 //90

global.enemyPos[3,1] = 80
global.enemyPos[3,2] = 160 //180

global.enemyPos[4,1] = 160
global.enemyPos[4,2] = 160 //180

global.allyPos[2,1] = 500 
global.allyPos[2,2] = 160 //180

global.enemyPos[5,1] = 40
global.enemyPos[5,2] = 250 //270

global.enemyPos[6,1] = 120
global.enemyPos[6,2] = 250 //270

global.allyPos[3,1] = 540 
global.allyPos[3,2] = 250 //270

global.EnemyNumber = 0

global.selection[1,0] = true
global.selection[2,0] = true
global.selection[3,0] = true
global.selection[4,0] = true
global.selection[5,0] = true
global.selection[6,0] = true
global.selection[7,0] = true
global.selection[8,0] = true
global.selection[9,0] = true
global.selection[10,0] = true
global.selection[11,0] = true
global.selection[12,0] = true
global.selection[13,0] = true
global.selection[14,0] = true
global.selection[15,0] = true
global.selection[16,0] = true
global.selection[17,0] = true
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.spawning = ds_grid_create(1280,720)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add things to grid
mp_grid_clear_all(global.grid)
mp_grid_add_instances(global.grid,objEnemy1,false)
mp_grid_add_instances(global.grid,objEnemy2,false)
mp_grid_add_instances(global.grid,objEnemy3,false)
mp_grid_add_instances(global.grid,objEnemy4,false)
mp_grid_add_instances(global.grid,objEnemy5,false)
mp_grid_add_instances(global.grid,objEnemy6,false)
mp_grid_add_instances(global.grid,objCollision,false)
mp_grid_add_instances(global.grid,objTree1,false)

mp_grid_clear_all(global.enemyFight1)
mp_grid_add_instances(global.enemyFight1,objEnemy2,false)
mp_grid_add_instances(global.enemyFight1,objEnemy3,false)
mp_grid_add_instances(global.enemyFight1,objEnemy4,false)
mp_grid_add_instances(global.enemyFight1,objEnemy5,false)
mp_grid_add_instances(global.enemyFight1,objEnemy6,false)

mp_grid_clear_all(global.enemyFight4)
mp_grid_add_instances(global.enemyFight4,objEnemy1,false)
mp_grid_add_instances(global.enemyFight4,objEnemy2,false)
mp_grid_add_instances(global.enemyFight4,objEnemy4,false)
mp_grid_add_instances(global.enemyFight4,objEnemy5,false)
mp_grid_add_instances(global.enemyFight4,objEnemy6,false)

mp_grid_clear_all(global.enemyFight7)
mp_grid_add_instances(global.enemyFight7,objEnemy1,false)
mp_grid_add_instances(global.enemyFight7,objEnemy2,false)
mp_grid_add_instances(global.enemyFight7,objEnemy3,false)
mp_grid_add_instances(global.enemyFight7,objEnemy4,false)
mp_grid_add_instances(global.enemyFight7,objEnemy6,false)

mp_grid_clear_all(global.enemyFightF)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawning
check = true
if room = rmSplash and tutorial = true{
    room_goto(rm_Tutorial)
}
if room = rm_Tutorial and tutorial = false{
    tutorial = true
    objPlayer.x = 672
    objPlayer.y = 3840
}else if room = rm_Mountain and mountain = false{
    mountain = true
    objPlayer.x = 912
    objPlayer.y = 3968
}else if room = rm_meadow and meadow = false{
    meadow = true
    objPlayer.x = 1056
    objPlayer.y = 3968
}else if room = rm_OutsideCastle and outsideCastle = false{
    outsideCastle = true
    objPlayer.x = 1888
    objPlayer.y = 3984
}else if room = rm_Throne and throne = false{
    throne = true
    objPlayer.x = 144
    objPlayer.y = 384
}else{
objPlayer.x = objPlayer.lastX
objPlayer.y = objPlayer.lastY
}


if room = rm_MFight or room = rm_TutFight or room = rm_FightC or room = rm_FightIC{
    roomt = true
    if instance_exists(objAlly1){
        objAlly1.x = global.allyPos[1,1]
        objAlly1.y = global.allyPos[1,2]
        }
    if instance_exists(objAlly2){
        objAlly2.x = global.allyPos[3,1]
        objAlly2.y = global.allyPos[3,2]
        }
    if instance_exists(objPlayer){
        objPlayer.x = global.allyPos[2,1]
        objPlayer.y = global.allyPos[2,2]
        }
    if instance_exists(objEnemy1){    
        objEnemy1.x = global.enemyPos[1,1]
        objEnemy1.y = global.enemyPos[1,2]
        }
    if instance_exists(objEnemy2){   
        objEnemy2.x = global.enemyPos[2,1]
        objEnemy2.y = global.enemyPos[2,2]
        }
    if instance_exists(objEnemy3){    
        objEnemy3.x = global.enemyPos[3,1]
        objEnemy3.y = global.enemyPos[3,2]
        }
    if instance_exists(objEnemy4){    
        objEnemy4.x = global.enemyPos[4,1]
        objEnemy4.y = global.enemyPos[4,2]
        }
    if instance_exists(objEnemy5){    
        objEnemy5.x = global.enemyPos[5,1]
        objEnemy5.y = global.enemyPos[5,2]
        }
    if instance_exists(objEnemy6){    
        objEnemy6.x = global.enemyPos[6,1]
        objEnemy6.y = global.enemyPos[6,2]
        }


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grid Destroy
mp_grid_destroy(global.grid)
ds_grid_destroy(global.spawning)
mp_grid_destroy(global.enemyFight1)
mp_grid_destroy(global.enemyFight4)
mp_grid_destroy(global.enemyFight7)
mp_grid_destroy(global.enemyFightF)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_reset()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_set(sh_saturation)
shader_set_uniform_f(shader_get_uniform(sh_saturation, "Position"), -0.4);
shader_set(sh_saturation_new)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Controller
//Initialization
Z -= 1
if Z &lt;= 0 
{
    if room = rmINI room_goto_next()
    instance_activate_object(objPlayer) //Player
}
//roomCorners and disabling far away objects
x = view_xview[0]
y = view_yview[0]
xZ = x+view_wview[0]
yZ = y+view_hview[0]
//instance_deactivate_region(x,y,xZ,yZ, false, true);
//instance_activate_region(view_xview[0], view_yview[0], view_wview[0], view_hview[0], true);
//Nessasary Objects are activated here
instance_activate_object(objPlayer) //Player
if instance_exists(objTree1){
instance_activate_object(objTree1)
}
instance_activate_object(objRoomTransfer)
//Debug
if Pause = false
{
    if keyboard_check_pressed(vk_subtract) 
    {
        with instance_create(0,0,objRoomTransfer) // &lt;-handle room transfers
        {
            targetRoom = "PREVIOUS"
            //Load = 480
        }
    }
    if keyboard_check_pressed(vk_add)
    {
        with instance_create(0,0,objRoomTransfer) // &lt;-handle room transfers
        {
            targetRoom = "NEXT"
            //Load = 480
        }
    }
    
}
if room = rm_Tutorial and objPlayer.y &lt; 912{
    objPlayer.y -= 915
}
if objMasterController.check = true and point_in_rectangle(objPlayer.x,objPlayer.y,608,1072,640,1088) and room = rm_Tutorial{
     with objPlayer lastRoom = room_get_name(room)
     with objPlayer lastX = x
     with objPlayer lastY = y+10
     with instance_create(x,y,objRoomTransfer) targetRoom = rm_tavern
}
if objMasterController.check = true and point_in_rectangle(objPlayer.x,objPlayer.y,544,2320,576,2336) and room = rm_meadow{
     with objPlayer lastRoom = room_get_name(room)
     with objPlayer lastX = x
     with objPlayer lastY = y+10
     with instance_create(x,y,objRoomTransfer) targetRoom = rm_tavern
}
if objMasterController.check = true and point_in_rectangle(objPlayer.x,objPlayer.y,256,2672,288,2688) and room = rm_Mountain{
     with objPlayer lastRoom = room_get_name(room)
     with objPlayer lastX = x
     with objPlayer lastY = y+10
     with instance_create(x,y,objRoomTransfer) targetRoom = rm_tavern
}
if objMasterController.check = true and point_in_rectangle(objPlayer.x,objPlayer.y,3424,2800,3456,2816) and room = rm_OutsideCastle{
     with objPlayer lastRoom = room_get_name(room)
     with objPlayer lastX = x
     with objPlayer lastY = y+10
     with instance_create(x,y,objRoomTransfer) targetRoom = rm_tavern
}
if objMasterController.check = true and (objPlayer.y &lt; 1  ) {
    objMasterController.check = false

    with instance_create(x,y,objRoomTransfer){
        if room = rm_Tutorial{
            targetRoom = rm_Mountain   
        }
        if room = rm_Mountain{
            targetRoom = rm_meadow
        }
        if room = rm_meadow{
            targetRoom = rm_OutsideCastle
        }
        if room = rm_OutsideCastle{
            targetRoom = rm_Throne
        }
    }
}


//Pause Handle
        if quitting = true b = 1
        else b = 0
        if quitting = false
        {
            a = 0
            if keyboard_check_pressed(vk_escape) and Pause == true
            {
                Pause = false
                depth = 0
                bView = false
                C = false
            }else if keyboard_check_pressed(vk_escape) and Pause == false
            {
                depth = -100000000
                bView = true
                Pause = true
                
            }
        }
        if Pause = true
        {
            instance_deactivate_all(true)
            if room = rm_MFight or room = rm_TutFight or room = rm_FightC or room = rm_FightIC{
                if bView = true{
                    view_xview = xa
                    view_yview = ya-1
                }
            }
        }
        if Pause = false instance_activate_all()
        /*if (mouse_x = mouse_xprevious or mouse_y = mouse_yprevious) and (keyboard_check_pressed(vk_left) or keyboard_check_pressed(vk_right)) and quitting = true
        {
            mouseUsage = false
        }
        
        if (mouse_x = mouse_xprevious or mouse_y = mouse_yprevious) and (keyboard_check_pressed(vk_up) or keyboard_check_pressed(vk_down)) 
        {
            mouseUsage = false
            if C = false
            {
                if point_in_rectangle(mouse_x,mouse_y,view_xview+xa,view_yview+ya,view_xview+xb,view_yview+yb) Set = 0
                else if point_in_rectangle(mouse_x,mouse_y,view_xview+xc,view_yview+yc,view_xview+xd,view_yview+yd) Set = 1
                else if point_in_rectangle(mouse_x,mouse_y,view_xview+xe,view_yview+ye,view_xview+xf,view_yview+yf) Set = 2
                else if point_in_rectangle(mouse_x,mouse_y,view_xview+xg,view_yview+yg,view_xview+xh,view_yview+yh) Set = 3
                else if point_in_rectangle(mouse_x,mouse_y,view_xview+xi,view_yview+yi,view_xview+xj,view_yview+yj) Set = 4
                else if point_in_rectangle(mouse_x,mouse_y,view_xview+xk,view_yview+yk,view_xview+xl,view_yview+yl) Set = 5
                else Set = Setprevious
                C = true
            }
        }
        if (mouse_x != mouse_xprevious or mouse_y != mouse_yprevious) 
        {
            mouseUsage = true
            Set = -99
            C = false
        }
        
        if Set != -99 Setprevious = Set
        mouse_xprevious = mouse_x
        mouse_yprevious = mouse_y */
        if keyboard_check_pressed(vk_up)
        {
            Set -= 1
        }
        if keyboard_check_pressed(vk_down)
        {
            Set += 1
        }
        if Set &gt; MAX-1 Set = 0
        if Set &lt; 0 and Set != -99 Set = MAX-1
        
//----//            //----//
//       Pause Menu       //
//----//            //----//
if Pause = true
{
    if quitting = false
    {
            draw_set_halign(fa_center)
            draw_set_valign(fa_center)
            draw_set_alpha(1)
            draw_set_colour(c_black)
            draw_rectangle(0,0,room_width,room_height,false)
            draw_set_colour(c_white)
            draw_text(view_xview+(view_wview/2),view_yview+(view_hview/2),"Game Paused")
            draw_set_halign(fa_left)
            draw_set_valign(fa_top)
            
            if Bcar0 = true
                {
                    t = (t + increment) mod 360;
                    if t &gt;= 360 
                    {
                        Bcar0 = false
                    }
                }
                MAX = 0
                MAX +=1
        draw_set_alpha(.1)
                if point_in_rectangle(mouse_x,mouse_y,view_xview+xa,view_yview+ya,view_xview+xb,view_yview+yb) and mouseUsage = true
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xb+1,view_yview+ya,view_xview+xb+1+shift+(amplitude),view_yview+yb,false)
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        Pause = false
                    }
                }
                if Set = 0
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xb+1,view_yview+ya,view_xview+xb+1+shift+(amplitude),view_yview+yb,false)
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        Pause = false
                    }
                }
            draw_set_colour(c_white)
            draw_rectangle(view_xview+xa,view_yview+ya,view_xview+xb,view_yview+yb,false)
            draw_set_alpha(1)
            draw_set_font(fntTextBox)
            draw_text(view_xview+xa,view_yview+ya-1,"Resume")
        draw_set_alpha(.1)
                MAX +=1
                if point_in_rectangle(mouse_x,mouse_y,view_xview+xc,view_yview+yc,view_xview+xd,view_yview+yd) and mouseUsage = true
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xd+1,view_yview+yc,view_xview+xd+1+shift+(amplitude),view_yview+yd,false)
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        scrSaveFunc()
                        Pause = false
                    }
                }
                if Set = 1
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xd+1,view_yview+yc,view_xview+xd+1+shift+(amplitude),view_yview+yd,false)
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        scrSaveFunc()
                        Pause = false
                    }
                }
            draw_set_colour(c_white)
            draw_rectangle(view_xview+xc,view_yview+yc,view_xview+xd,view_yview+yd,false)
            draw_set_alpha(1)
            draw_set_font(fntTextBox)
            draw_text(view_xview+xc,view_yview+yc-1,"Save Game")
        draw_set_alpha(.1)
                MAX +=1
                if point_in_rectangle(mouse_x,mouse_y,view_xview+xe,view_yview+ye,view_xview+xf,view_yview+yf) and mouseUsage = true
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xf+1,view_yview+ye,view_xview+xf+1+shift+(amplitude),view_yview+yf,false)
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        scrLoadFunc()
                        instance_activate_all()
                        Pause = false
                    }
                }
                if Set = 2
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xf+1,view_yview+ye,view_xview+xf+1+shift+(amplitude),view_yview+yf,false)
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        scrLoadFunc()
                        instance_activate_all()
                        Pause = false
                    }
                }
            draw_set_colour(c_white)
            draw_rectangle(view_xview+xe,view_yview+ye,view_xview+xf,view_yview+yf,false)
            draw_set_alpha(1)
            draw_set_font(fntTextBox)
            draw_text(view_xview+xe,view_yview+ye-1,"Load Game")
        draw_set_alpha(.1)
                MAX +=1
                if point_in_rectangle(mouse_x,mouse_y,view_xview+xg,view_yview+yg,view_xview+xh,view_yview+yh) and mouseUsage = true
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xh+1,view_yview+yg,view_xview+xh+1+shift+(amplitude),view_yview+yh,false)
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        
                        Pause = false
                    }
                }
                if Set = 3
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xh+1,view_yview+yg,view_xview+xh+1+shift+(amplitude),view_yview+yh,false)
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        
                        Pause = false
                    }
                }
            draw_set_colour(c_white)
            draw_rectangle(view_xview+xg,view_yview+yg,view_xview+xh,view_yview+yh,false)
            draw_set_alpha(1)
            draw_set_font(fntTextBox)
            draw_text(view_xview+xg,view_yview+yg-1,"Stats")
        draw_set_alpha(.1)
                MAX +=1
                if point_in_rectangle(mouse_x,mouse_y,view_xview+xi,view_yview+yi,view_xview+xj,view_yview+yj) and mouseUsage = true
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xj+1,view_yview+yi,view_xview+xj+1+shift+(amplitude),view_yview+yj,false)
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        room_goto(rmSplash)
                        instance_activate_all()
                        Pause = false
                    }
                }
                if Set = 4
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xj+1,view_yview+yi,view_xview+xj+1+shift+(amplitude),view_yview+yj,false)
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        room_goto(rmSplash)
                        instance_activate_all()
                        Pause = false
                    }
                }
            draw_set_colour(c_white)
            draw_rectangle(view_xview+xi,view_yview+yi,view_xview+xj,view_yview+yj,false)
            draw_set_alpha(1)
            draw_set_font(fntTextBox)
            draw_text(view_xview+xi,view_yview+yi-1,"Quit to Main Menu")
        draw_set_alpha(.1)
                MAX +=1
                if point_in_rectangle(mouse_x,mouse_y,view_xview+xk,view_yview+yk,view_xview+xl,view_yview+yl) and mouseUsage = true
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xl+1,view_yview+yk,view_xview+xl+1+shift+(amplitude),view_yview+yl,false)
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        a -= 1
                        quitting = true
                    }
                }
                if Set = 5
                {
                            shift = amplitude * sin(degtorad(t));
                            yy += vspeed;
                            draw_set_alpha(.2)
                            draw_rectangle(view_xview+xl+1,view_yview+yk,view_xview+xl+1+shift+(amplitude),view_yview+yl,false)
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        a -= 1
                        quitting = true
                    }
                }
            draw_set_colour(c_white)
            draw_rectangle(view_xview+xk,view_yview+yk,view_xview+xl,view_yview+yl,false)
            draw_set_alpha(1)
            draw_text(view_xview+xk,view_yview+yk-1,"Quit to Desktop")
    }
}
        //----//
        //QuitMenu
        if quitting = true and b = 1
        {
            if keyboard_check_pressed(vk_left)
            {
                SetQ -= 1
            }
            if keyboard_check_pressed(vk_right)
            {
                SetQ += 1
            }
            if SetQ &lt; 0 SetQ = 1
            if SetQ &gt; 1 SetQ = 0
                draw_set_halign(fa_center)
                draw_set_valign(fa_center)
                draw_set_font(fntTextBox)
                draw_set_alpha(1)
                draw_set_colour(c_black)
                draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,false)
                draw_set_colour(c_white)
                draw_text(view_xview+(view_wview/2),view_yview+(view_hview/2),"Are you sure you want to quit?")
                draw_set_alpha(.1)
                if point_in_rectangle(mouse_x,mouse_y,view_xview+(view_wview/2)-156,view_yview+(view_hview/2)+12,view_xview+(view_wview/2)-20,view_yview+(view_hview/2)+22) and mouseUsage = true
                {
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        quitting = false
                    }
                }
                if SetQ = 0 and mouseUsage = false
                {
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        quitting = false
                    }
                }
                draw_rectangle(view_xview+(view_wview/2)-156,view_yview+(view_hview/2)+12,view_xview+(view_wview/2)-20,view_yview+(view_hview/2)+22,false)
                draw_set_alpha(.1)
                if point_in_rectangle(mouse_x,mouse_y,view_xview+(view_wview/2)+20,view_yview+(view_hview/2)+12,view_xview+(view_wview/2)+156,view_yview+(view_hview/2)+22) and mouseUsage = true
                {
                    draw_set_alpha(.2)
                    if mouse_check_button_pressed(mb_left)
                    {
                        instance_activate_all()
                        game_end()
                    }
                }
                if SetQ = 1 and mouseUsage = false
                {
                    draw_set_alpha(.2)
                    if keyboard_check_pressed(vk_space)
                    {
                        instance_activate_all()
                        game_end()
                    }
                }
                draw_rectangle(view_xview+(view_wview/2)+20,view_yview+(view_hview/2)+12,view_xview+(view_wview/2)+156,view_yview+(view_hview/2)+22,false)
                draw_set_valign(fa_top)
                draw_set_alpha(1)
                draw_text(view_xview+(view_wview/2)-88,view_yview+(view_hview/2)+11,"No")
                draw_text(view_xview+(view_wview/2)+88,view_yview+(view_hview/2)+11,"Yes")
                draw_set_halign(fa_left)
        }
        if a &lt; 0 
        {
            b = 1
            a = 0
        }
//----//
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global attacker
if Pause = false and (room = rm_MFight or room = rm_TutFight or room = rm_FightC or room = rm_FightIC){
if objPlayer.attacking = true{
    global.attacker = 2
}   

if objAlly1.attacking = true{
    global.attacker = 1
}

if objAlly2.attacking = true{
    global.attacker = 3
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
